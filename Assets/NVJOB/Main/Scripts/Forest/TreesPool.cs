// Infinity Square/Space. The prototype of the game is open source. V1.0
// https://github.com/nvjob/Infinity-Square-Space
// #NVJOB Nicholas Veselov
// https://nvjob.pro
// MIT license (see License_NVJOB.txt)



using UnityEngine;
using System.Collections.Generic;



public class TreesPool : MonoBehaviour {
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    public List<Trees> treesList = new List<Trees>();

    //--------------

    static Transform stThisTransform;
    static int[] stNumberTrees;
    static GameObject[][] stTrees;
    

    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        
    private void Awake()
    {
        //--------------

        stThisTransform = transform;
        AddObjectsToPool();

        //--------------
    }
    


    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    


    private void AddObjectsToPool()
    {
        //--------------

        stNumberTrees = new int[treesList.Count];
        stTrees = new GameObject[treesList.Count][];

        //--------------

        for (int num = 0; num < treesList.Count; num++)
        {
            stNumberTrees[num] = treesList[num].numberTrees;
            stTrees[num] = new GameObject[stNumberTrees[num]];
            InstanInPool(treesList[num].tree, stTrees[num]);
        }

        //--------------
    }
    


    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    static private void InstanInPool(GameObject obj, GameObject[] objs)
    {
        //--------------

        for (int i = 0; i < objs.Length; i++)
        {
            objs[i] = Instantiate(obj);
            objs[i].SetActive(false);
            objs[i].transform.parent = stThisTransform;
        }
        
        //--------------
    }



    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    static public GameObject GiveTree(int num)
    {
        //--------------
        
        for (int i = 0; i < stNumberTrees[num]; i++) if (!stTrees[num][i].activeSelf) return stTrees[num][i];
        return null;
        
        //--------------
    }



    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    static public void TakeTree(GameObject obj)
    {
        //--------------

        obj.SetActive(false);
        if (obj.transform.parent != stThisTransform) obj.transform.parent = stThisTransform;

        //--------------
    }
    


    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}



[System.Serializable]

public class Trees
{
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    public GameObject tree;
    public int numberTrees = 100;



    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
